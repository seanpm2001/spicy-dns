# Copyright (c) 2021 by the Zeek Project. See LICENSE for details.
#
# Augment standard DNS grammar with Zeek-specific logic.

module Zeek_DNS;

import DNS from protocols;
import spicy;
import zeek;

on DNS::Message::%done {
    zeek::confirm_protocol();
}

on DNS::Header::%done {
    if ( zeek::is_orig() && self.flags.qr && zeek::number_packets() == 1 )
        zeek::flip_roles();
}

# Follow Zeek's heuristic if it's a query.
public function is_query(header: DNS::Header) : bool {
    if ( zeek::is_orig() && header.flags.qr && zeek::number_packets() == 1 )
        return True;

    return zeek::is_orig();
}

# Normalize the label.
public function name(n: DNS::Name) : bytes {
    return n.label.strip(spicy::Side::Both, b".").lower();
}

# Converts a DNS::Header into a Zeek dns_msg.
public function message(hdr: DNS::Header) : tuple<uint64, uint64, uint64, bool, bool, bool, bool, bool, uint64, uint64, uint64, uint64, uint64> {
    return (hdr.id, hdr.flags.opcode, hdr.flags.rcode, hdr.flags.qr != 0, hdr.flags.aa != 0, hdr.flags.tc != 0, hdr.flags.rd != 0,
            hdr.flags.ra != 0, hdr.flags.z, hdr.qdcount, hdr.ancount, hdr.nscount, hdr.arcount);
}

# Converts a DNS::ResourceRecord into a Zeek dns_answer.
public function answer(rr: DNS::ResourceRecord, rrtype: DNS::RRType) : tuple<uint64, bytes, uint64, uint64, interval> {
    return (cast<uint64>(rrtype), name(rr.name), cast<uint64>(rr.ty), rr.class, rr.ttl);
}

# Converts a DNS::RDataSOA into a Zeek dns_soa.
public function soa(soa: DNS::RDataSOA) : tuple<bytes, bytes, uint64, interval, interval, interval, interval> {
    return (name(soa.mname), name(soa.rname), soa.serial, soa.refresh, soa.retry, soa.expire, soa.minimum);
}
